import os
import re
import html
import logging
import requests
from dotenv import load_dotenv
from datetime import datetime
from utils.mensajeria import enviar_mensaje
from utils.conversaciones import conversaciones_activas, cerrar_conversacion, reenviar_al_asesor
from app.db.init_db import SessionLocal
from app.services.productos import buscar_productos

load_dotenv()

# --- Configuraci√≥n de entorno y API ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
ASESOR_CHAT_ID = os.getenv("ASESOR_CHAT_ID")  # Opcional

# --- Estado del bot ---
bot_activo = True

# ==============================
# üß± FUNCIONES UTILITARIAS
# ==============================

def limpiar_texto(texto: str) -> str:
    """
    Limpia el texto eliminando caracteres invisibles o problem√°ticos,
    y asegurando que est√© en formato seguro para Telegram.
    """
    if not texto:
        return ""

    # Reemplaza espacios invisibles y limpia caracteres extra√±os
    texto = texto.replace('\u200b', '')  # Zero-width space
    texto = re.sub(r'[^\x00-\x7F\u00A1-\uFFFF]+', '', texto)  # Elimina caracteres no UTF-8 v√°lidos

    # Opcional: escapa caracteres conflictivos si se usa Markdown
    texto = texto.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
    
    return texto.strip()

def enviar_mensaje(chat_id: int, texto: str) -> bool:
    """
    Env√≠a un mensaje a un chat espec√≠fico usando la API de Telegram.
    Retorna True si el mensaje fue enviado con √©xito, False si fall√≥.
    """
    try:
        texto_limpio = limpiar_texto(texto)

        if not texto_limpio:
            logging.warning(f"‚ö†Ô∏è Texto vac√≠o o inv√°lido. No se env√≠a mensaje a {chat_id}")
            return False

        payload = {
            "chat_id": chat_id,
            "text": texto_limpio,
            "parse_mode": "Markdown",  # Aseg√∫rate de que el texto est√© escapado si usas esto
        }

        logging.debug(f"üì§ Enviando mensaje a {chat_id}: {texto_limpio}")
        
        response = requests.post(
            f"{TELEGRAM_API_URL}/sendMessage",
            json=payload,
            timeout=10
        )
        response.raise_for_status()
        return True
    except requests.exceptions.HTTPError as http_err:
        logging.error(f"‚ùå Error HTTP al enviar mensaje a {chat_id}: {http_err} - {response.text}")
    except Exception as e:
        logging.error(f"‚ùå Error general enviando mensaje a {chat_id}: {e}")
    return False


def notificar_error(chat_id: int, error: Exception):
    logging.error(f"üö® Error en el bot para chat_id {chat_id}: {error}")


# ==============================
# ü§ñ COMANDOS DEL BOT
# ==============================

def manejar_comando(comando: str, chat_id: int) -> str:
    global bot_activo
    comando = normalizar_comando(comando)

    if comando == "/ayuda":
        return (
            "ü§ñ *¬°Hola! Estoy aqu√≠ para ayudarte.*\n\n"
            "Puedes escribirme directamente para consultar por productos. Ejemplos:\n"
            "‚Ä¢ *¬øTienes relojes?*\n"
            "‚Ä¢ *Vendes perfumes?*\n\n"
            "üìå Tambi√©n puedes usar estos comandos:\n"
            "üõçÔ∏è /productos ‚Äì Ver productos disponibles\n"
            "üïí /horarios ‚Äì Horario de atenci√≥n\n"
            "üöö /envios ‚Äì Informaci√≥n sobre env√≠os\n"
            "üí∏ /costos ‚Äì Costos de env√≠o\n"
            "üßë‚Äçüíº /asesor ‚Äì Hablar con un asesor humano\n"
            "‚ùå /cerrar ‚Äì Finalizar la conversaci√≥n actual"
        )

    elif comando == "/estado":
        activos = list(conversaciones_activas.keys())
        if not activos:
            return "üîç No hay conversaciones activas en este momento."
        listado = "\n".join([f"‚Ä¢ Usuario ID: `{uid}`" for uid in activos])
        return f"üìä Conversaciones activas ({len(activos)}):\n{listado}"

    elif comando == "/cerrar":
        cerrar_conversacion(chat_id)
        return "üëã Conversaci√≥n cerrada. Usa /asesor si deseas volver a iniciar una."

    elif comando == "/reactivar":
        bot_activo = True
        logging.info("üîÅ Bot reactivado manualmente por comando /reactivar.")
        return "üîÅ Bot reactivado exitosamente."

    elif comando == "/horarios":
        return "üïí Nuestro horario es de lunes a s√°bado de 8:00 a.m. a 6:00 p.m."

    elif comando == "/productos":
        return "üì¶ Contamos con los siguientes productos: Relojes originales, Perfumes, Gafas y m√°s. Puedes preguntarme directamente por alguno."

    elif comando == "/envios":
        return "üöö Realizamos env√≠os a todo el pa√≠s. Tiempo estimado: 2 a 3 d√≠as h√°biles."

    elif comando == "/costos":
        return "üí∞ Los costos de env√≠o dependen de la transportadora y el destino. Pregunta y te ayudamos con gusto."

    elif comando == "/asesor":
        logging.info(f"üìû Solicitud de asesor humano por chat_id: {chat_id}")
        mensaje = f"üë§ El usuario *{chat_id}* ha solicitado atenci√≥n personalizada."
        if ASESOR_CHAT_ID:
            try:
                enviar_mensaje(int(ASESOR_CHAT_ID), mensaje)
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Error notificando al asesor: {e}")
        return "üßë‚Äçüíº En breve un asesor te contactar√° por este mismo chat."

    elif comando.startswith("/responder "):
        partes = comando.split()
        if len(partes) == 2 and partes[1].isdigit():
            id_usuario = int(partes[1])
            conversaciones_activas[id_usuario] = True
            return (
                f"‚úèÔ∏è Puedes responder escribiendo el siguiente mensaje:\n\n"
                f"{id_usuario}: Tu respuesta aqu√≠"
            )
        else:
            return "‚ùå Uso incorrecto de /responder. Ejemplo: /responder 123456789"

    else:
        return "‚ùì Comando no reconocido. Usa /ayuda para ver las opciones disponibles."
    
# ==============================
# üîÅ FUNCIONES AUXILIARES
# ==============================

def normalizar_comando(comando: str) -> str:
    return comando.lower().strip()

def responder_fallback(chat_id: int, mensaje_usuario: str) -> str:
    logging.info(f"ü§∑ Respuesta fallback para chat_id: {chat_id} ‚Äì mensaje: {mensaje_usuario}")
    return (
        "ü§ñ Lo siento, no comprend√≠ tu mensaje.\n"
        "Puedes usar /ayuda para ver las opciones disponibles, o escribe /asesor para hablar con un humano."
    )
def generar_respuesta(chat_id: int, mensaje_usuario: str) -> str:
    try:
        db = SessionLocal()
        respuesta = buscar_productos(mensaje_usuario, db)
        db.close()
        return respuesta
    except Exception as e:
        logging.error(f"‚ùå Error buscando producto: {e}")
        return responder_fallback(chat_id, mensaje_usuario)